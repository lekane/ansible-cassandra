---
# Copyright (c) 2014 Lekane Oy. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#    * Neither the name of Lekane Oy nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

- name: Set cassandra_config_dir fact (DCE)
  when: install_version == "dce"
  set_fact: cassandra_config_dir=/etc/cassandra

- name: Set cassandra_config_dir fact (DSE)
  when: install_version == "dse"
  set_fact: cassandra_config_dir=/etc/dse/cassandra

- name: Check for cassandra_config_dir existence
  stat: path={{ cassandra_config_dir }}
  register: cassandra_config_dir_state

- name: Create RAID-0 from ephemeral drives
  script: "raid_ephemeral.sh {{ deployment_environment }}"
  when: "{{ init_server | default(false) }} == true and deployment_environment == 'aws'"

- name: Symlink /ephemeral to /data
  file: src=/ephemeral dest=/data state=link
  when: "{{ init_server | default(false) }} == true and deployment_environment == 'euca'"

- name: Stop Cassandra DCE
  when: "{{ init_server | default(false) }} == false and install_version == 'dce' and cassandra_config_dir_state.stat.exists == true"
  shell: "nodetool disablethrift && nodetool disablebinary && nodetool disablegossip && nodetool drain && service cassandra stop"

- name: Stop Cassandra DSE
  when: "{{ init_server | default(false) }} == false and install_version == 'dse' and cassandra_config_dir_state.stat.exists == true"
  shell: "nodetool disablethrift && nodetool disablebinary && nodetool disablegossip && nodetool drain && service dse stop"

- name: Check Cassandra system.log existence
  stat: path=/var/log/cassandra/system.log
  register: system_log_file

- name: Clear Cassandra system.log
  when: system_log_file.stat.exists == True
  shell: echo > /var/log/cassandra/system.log

- name: Install Datastax Community Cassandra & tools
  when: install_version == "dce"
  apt: pkg={{item}} state=present
  register: cassandra_installed_dce
  with_items:
  - dsc30={{ dsc_version }}
  - cassandra={{ cassandra_version }}
  - cassandra-tools={{ cassandra_tools_version }}

- name: Install Datastax Enterprise Cassandra
  when: install_version == "dse"
  register: cassandra_installed_dse
  apt: pkg={{item}} state=present
  with_items:
  - dse-full={{ dse_version }}

- name: get cassandra_installed variable
  set_fact: cassandra_installed="{{ cassandra_installed_dce.changed if install_version == 'dce' else cassandra_installed_dse.changed }}"

- name: Wait for server autostart
  when: "{{ init_server | default(false) }} == true and {{ cassandra_installed }} == true"
  wait_for: path=/var/log/cassandra/system.log search_regex="Starting listening for CQL clients"

- name: Stop Cassandra DCE (autostarted on install)
  when: "{{ init_server | default(false) }} == true and install_version == 'dce'"
  service: name=cassandra state=stopped

- name: Stop Cassandra DSE (autostarted on install)
  when: "{{ init_server | default(false) }} == true and install_version == 'dse'"
  service: name=dse state=stopped

- name: Clear Cassandra logs (after autostart)
  when: "{{ init_server | default(false) }} == true"
  shell: echo > /var/log/cassandra/system.log

- name: Cassandra system.log ownership check
  file: path=/var/log/cassandra/system.log owner=cassandra group=cassandra mode=0644

- name: Remove cluster metadata
  shell: rm -rf /var/lib/cassandra/*
  when: "{{ init_server | default(false) }} == true"

- name: Create data directory
  file: path=/data/cassandra/data state=directory owner=cassandra group=cassandra mode=0755

- name: Create commitlog directory
  file: path=/data/cassandra/commitlog state=directory owner=cassandra group=cassandra mode=0755

- name: Create saved_caches directory
  file: path=/data/cassandra/saved_caches state=directory owner=cassandra group=cassandra mode=0755

- name: Create commitlog backup directory
  file: path=/data/cassandra/commit_log_backup state=directory owner=cassandra group=cassandra mode=0755

- name: Create hints directory
  file: path=/data/cassandra/hints state=directory owner=cassandra group=cassandra mode=0755

- name: Backup original cassandra.yaml
  command: "cp {{ cassandra_config_dir }}/cassandra.yaml {{ cassandra_config_dir }}/cassandra.yaml.orig.{{ cassandra_version }} creates={{ cassandra_config_dir }}/cassandra.yaml.orig.{{ cassandra_version }}"

- name: Backup original cassandra-env.sh
  command: "cp {{ cassandra_config_dir }}/cassandra-env.sh {{ cassandra_config_dir }}/cassandra-env.sh.orig.{{ cassandra_version }} creates={{ cassandra_config_dir }}/cassandra-env.sh.orig.{{ cassandra_version }}"

- name: Backup original cassandra-rackdc.properties
  command: "cp {{ cassandra_config_dir }}/cassandra-rackdc.properties {{ cassandra_config_dir }}/cassandra-rackdc.properties.orig.{{ cassandra_version }} creates={{ cassandra_config_dir }}/cassandra-rackdc.properties.orig.{{ cassandra_version }}"

- name: Backup original cassandra-topology.properties
  command: "cp {{ cassandra_config_dir }}/cassandra-topology.properties {{ cassandra_config_dir }}/cassandra-topology.properties.orig.{{ cassandra_version }} creates={{ cassandra_config_dir }}/cassandra-topology.properties.orig.{{ cassandra_version }}"

- name: Backup original jvm.options
  command: "cp {{ cassandra_config_dir }}/jvm.options {{ cassandra_config_dir }}/jvm.options.orig.{{ cassandra_version }} creates={{ cassandra_config_dir }}/jvm.options.orig.{{ cassandra_version }}"

- name: Template cassandra.yml
  template: "src=cassandra.yaml.j2 dest={{ cassandra_config_dir }}/cassandra.yaml mode=0664"

- name: Template cassandra-env.sh
  template: "src=cassandra-env.sh.j2 dest={{ cassandra_config_dir }}/cassandra-env.sh mode=0664"

- name: Template cassandra-rackdc.properties
  template: "src=cassandra-rackdc.properties.j2 dest={{ cassandra_config_dir }}/cassandra-rackdc.properties mode=0664"

- name: Template cassandra-topology.properties
  template: "src=cassandra-topology.properties.j2 dest={{ cassandra_config_dir }}/cassandra-topology.properties mode=0664"

- name: Template jvm.options
  template: "src=jvm.options.j2 dest={{ cassandra_config_dir }}/jvm.options mode=0664"

- name: Enable performance tweaks
  script: performance_tweaks.sh

- name: Enable config to replace existing dead node
  when: "{{ replace_dead_server | default(false) }} == true"
  command: "sed -i -e '/cassandra.replace_address/s/#JVM_OPTS/JVM_OPTS/' {{ cassandra_config_dir }}/cassandra-env.sh"

- name: Disable auto_bootstrap for empty cluster
  when: "{{ empty_cluster | default(false) }} == true"
  command: "sed -i -e '/#auto_boostrap/s/#auto_boostrap/auto_boostrap/' {{ cassandra_config_dir }}/cassandra.yaml"

- include: dse_config.yml
  when: install_version == "dse"

- replace: dest=/etc/init.d/cassandra regexp='(\s+)cassandra\.\+CassandraDaemon(\s+.*)?$' replace='\1cassandra\2' backup=yes

- name: Cassandra DCE startup
  when: install_version == "dce"
  service: name=cassandra state=restarted

- name: Cassandra DSE startup
  when: install_version == "dse"
  service: name=dse state=restarted

- name: Wait for Cassandra startup (bootstrapping)
  wait_for: path=/var/log/cassandra/system.log search_regex="Starting listening for CQL clients" timeout=900
  when: "{{ init_server | default(false) }} == false"

- name: Wait for Cassandra startup (not bootstrapping)
  pause: seconds=90
  when: "{{ init_server | default(false) }} == true"

- name: Disable config to replace existing dead node
  when: "{{ replace_dead_server | default(false) }} == true"
  command: "sed -i -e '/cassandra.replace_address/s/JVM_OPTS=/#JVM_OPTS=/' {{ cassandra_config_dir }}/cassandra-env.sh"

- name: Re-enable auto_bootstrap for empty cluster
  when: "{{ empty_cluster | default(false) }} == true"
  command: "sed -i -e '/auto_boostrap/s/auto_boostrap/#auto_boostrap/' {{ cassandra_config_dir }}/cassandra.yaml"

- name: Extract tokens & update cassandra.yaml
  script: token_store.sh
  when: "{{ init_server | default(false) }} == true"

- name: Copy tokens from node
  fetch: "src={{ cassandra_config_dir }}/TOKENS dest=inventory/tokens/{{ ansible_hostname }}.token flat=yes"
  when: "{{ init_server | default(false) }} == true"
